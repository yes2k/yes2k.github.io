[
  {
    "objectID": "posts/nhl_goal_modelling/index.html",
    "href": "posts/nhl_goal_modelling/index.html",
    "title": "Modelling NHL Goals using Hierarchical Poisson Model Using Stan",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(cmdstanr)\nlibrary(bayesplot)\nlibrary(posterior)\nlibrary(here)\nlibrary(loo)\nlibrary(cowplot)\nlibrary(furrr)\nlibrary(knitr)\nlibrary(httr)\ntheme_set(theme_classic())\n\nset_cmdstan_path()\n\n# win_prob &lt;- new.env()\n# source(\n#   here(\"src\", \"models\", \"win_prob_model\", \"win_prob_model_stan.R\"),\n#   local = win_prob\n# )\n\n# helper &lt;- new.env()\n# source(\n#   here(\"src\", \"models\", \"helper.R\"),\n#   local = helper\n# )\n\nset.seed(123)\nCode\n# Some Helper Functions"
  },
  {
    "objectID": "posts/nhl_goal_modelling/index.html#introduction",
    "href": "posts/nhl_goal_modelling/index.html#introduction",
    "title": "Modelling NHL Goals using Hierarchical Poisson Model Using Stan",
    "section": "Introduction",
    "text": "Introduction\nIn this article I’m going to describe how I model NHL goals in Stan using a Hierarchical Poisson Model. My starting point for this was that I wanted to try and predict who will win an NHL game. One of the simplest models to do this is called a Bradley-Terry Model (link to it), which is type of model that ranks variables based on pairwise outcomes. So you could take the wins and loses for every game in the NHL and each team would get a “score” which would represent their skill level compared other teams. It’s very similar to the ELO rating system.\nWhen it comes to hockey games we have more information about the outcome of a game, i.e. the number of goals each team scored. Rather than just looking at wins and losses, we can predict the outcome of a hockey game by modelling the number of goals a team scores. We can go much deeper with hockey (shots, penalties, simulating other events), but it’s always a good idea to start simple and add complexity later on."
  },
  {
    "objectID": "posts/nhl_goal_modelling/index.html#the-model",
    "href": "posts/nhl_goal_modelling/index.html#the-model",
    "title": "Modelling NHL Goals using Hierarchical Poisson Model Using Stan",
    "section": "The Model",
    "text": "The Model\nLets define some variables:\n\n\\(Y_{i}^{(h)}\\): A random variable that represents number of goals scored by the home team in the \\(i\\)th game of the season\n\\(att_{h[i]}\\): A latent variable that represents the “offensive ability” of the home team to score goals\n\\(def_{a[i]}\\): A latent variable that represents the “defensive ability” of the away team to suppress goal scoring.\n\\(is\\_home\\): An indicator variable that is 1 if the team is at home and 0 otherwise.\n\nThe model\n\\[\n\\begin{aligned}\nY_{i}^{(h)} &\\thicksim \\text{Poisson}(\\lambda_i) \\\\\n\\log \\lambda_i &= \\beta_0 + \\beta_1 is\\_home + att_{h[i]} + def_{a[i]} \\\\\natt_{h[i]} &\\thicksim \\mathcal{N}(0, \\sigma^2_{a}) \\\\\ndef_{a[i]} &\\thicksim \\mathcal{N}(0, \\sigma^2_{d})\n\\end{aligned}\n\\tag{1}\\]\nThe above is defined for the goals scored by the home team but we can do the same thing for away team goals:\n\\[\n\\begin{aligned}\nY_{i}^{(a)} &\\thicksim \\text{Poisson}(\\lambda_i) \\\\\n\\log \\lambda_i &= \\beta_0 + att_{a[i]} + def_{h[i]} \\\\\natt_{a[i]} &\\thicksim \\mathcal{N}(0, \\sigma^2_{a}) \\\\\ndef_{h[i]} &\\thicksim \\mathcal{N}(0, \\sigma^2_{d})\n\\end{aligned}\n\\tag{2}\\]\nThe only difference between home model(Equation 1) and away_model(Equation 2) is the swapping of which team is attacking and defending and the lack of a \\(is\\_home\\) variable in away_model(Equation 2)\nTo fit the model, we’ll be using data from the 2024-2025 regular season.\n\n\nCode\ndf &lt;- read_rds(here(\"posts\", \"nhl_goal_modelling\", \"nhl_2425_goal.rds\"))\nknitr::kable(df$model_df |&gt; arrange(game_id) |&gt; head(), format = \"html\")\n\n\n\n\n\ngame_id\nhome_team\naway_team\nhome_goals\naway_goals\ndate\naway_id\nhome_id\n\n\n\n\n2024020001\nBUF\nNJD\n1\n4\n2024-10-04\n2\n1\n\n\n2024020002\nNJD\nBUF\n3\n1\n2024-10-05\n1\n2\n\n\n2024020003\nSEA\nSTL\n2\n3\n2024-10-08\n28\n3\n\n\n2024020004\nFLA\nBOS\n6\n4\n2024-10-08\n11\n4\n\n\n2024020005\nUTA\nCHI\n5\n2\n2024-10-08\n30\n5\n\n\n2024020006\nMTL\nTOR\n1\n0\n2024-10-09\n20\n6\n\n\n\n\n\n\n\nEach row represents a single game and we the names of the home and away team under the home_team and away_team columns, and the number of goals under the home_goals and away_goals columns. Note that these are the final scores of the game, which would include goals scored in overtime and the shootout result. A possible extension of this model would be to model the OT and shootout separately."
  },
  {
    "objectID": "posts/nhl_goal_modelling/index.html#fitting-the-model-in-stan",
    "href": "posts/nhl_goal_modelling/index.html#fitting-the-model-in-stan",
    "title": "Modelling NHL Goals using Hierarchical Poisson Model Using Stan",
    "section": "Fitting the Model in Stan",
    "text": "Fitting the Model in Stan\nCoding up the model in Stan we get:\n\n\nCode\nwriteLines(readLines(here(\"posts\", \"nhl_goal_modelling\", \"model.stan\")))\n\n\ndata {\n  int&lt;lower=0&gt; N;\n  int&lt;lower=0&gt; n_teams;\n  \n  array[N] int&lt;lower=1, upper=n_teams&gt; home_teams;\n  array[N] int&lt;lower=1, upper=n_teams&gt; away_teams;\n  array[N] int&lt;lower=0&gt; home_goals;\n  array[N] int&lt;lower=0&gt; away_goals;\n  \n\n  int&lt;lower=0&gt; N_new;\n  array[N_new] int&lt;lower=1, upper=n_teams&gt; home_new;\n  array[N_new] int&lt;lower=1, upper=n_teams&gt; away_new;\n\n  int&lt;lower=0, upper=1&gt; only_prior;\n}\n\n\nparameters {\n  real mu;\n  real is_home;\n  \n  vector[n_teams] att;\n  vector[n_teams] def;\n  \n  real&lt;lower=0&gt; att_sigma;\n  real&lt;lower=0&gt; def_sigma;\n}\n\nmodel {\n  mu ~ normal(0, 1);\n  is_home ~ normal(0, 1);\n  \n  att ~ normal(0, att_sigma);\n  att_sigma ~ normal(0, 1);\n  \n  def ~ normal(0, def_sigma);\n  def_sigma ~ normal(0, 1);\n  \n  if (only_prior == 0){\n    home_goals ~ poisson_log(mu + is_home + att[home_teams] + def[away_teams]);\n    away_goals ~ poisson_log(mu + att[away_teams] + def[home_teams]);\n  }\n  \n}\n\ngenerated quantities{\n\n  // posterior pred on fitted data\n  array[N] real fit_home_goals = poisson_log_rng(mu + is_home + att[home_teams] + def[away_teams]);\n  array[N] real fit_away_goals = poisson_log_rng(mu + att[away_teams] + def[home_teams]); \n\n  // log likelihood\n  array[N] real log_lik;\n  for (i in 1:N) {\n    log_lik[i] = poisson_log_lpmf(home_goals[i] | mu + is_home + att[home_teams[i]] + def[away_teams[i]]) +\n                 poisson_log_lpmf(away_goals[i] | mu + att[away_teams[i]] + def[home_teams[i]]);\n  }\n\n  // Posterior pred on new data\n  array[N_new] real home_rate;\n  for (i in 1:N_new) {\n    home_rate[i] = mu + is_home + att[home_new[i]] + def[away_new[i]];\n  }\n\n  array[N_new] real away_rate;  \n  for (i in 1:N_new) {\n    away_rate[i] = mu + att[away_new[i]] + def[home_new[i]];\n  }\n\n  array[N_new] real pred_home_goals = poisson_log_rng(home_rate);\n  array[N_new] real pred_away_goals = poisson_log_rng(away_rate);\n}\n\n\nNow before we fit the model, we have to set some priors for our parameters. I don’t really have any information about what the parameters could be, but the we do have information about the \\(Y_i\\)’s, the number of goals scored in regulation time in a single game. In the vast majority of games, a single team is probably going to be scoring less than 10 goals, around 0-5 is more likely. This gives us an likely upperbound for our \\(\\lambda\\) parameter: \\(\\lambda \\leq 10 \\Rightarrow \\log \\lambda \\leq 2.3\\). We are not trying to be too precise here, it’s just to make sure that priors are not too wide to allow for unrealistic goal senarios.\nThe parameters that we need to set a prior on are \\(\\beta_0\\), \\(\\beta_1\\), \\(\\sigma^2_{a}\\), \\(\\sigma^2_{h}\\).\n\nThe prior for \\(\\beta_0\\) and \\(\\beta_1\\) will be \\(\\mathcal{N}(0, 1)\\)\nThe prior for \\(\\sigma^2_{a}\\), \\(\\sigma^2_{h}\\) will be \\(\\mathcal{N}_+(0, 1)\\)\n\nTo see the effect of these priors, we can do a prior predicitve check.\n\n\nCode\ndata_list &lt;- list(\n  N = df$model_df |&gt; nrow(),\n  n_teams = df$team_id |&gt; nrow(),\n  home_teams = df$model_df$home_id,\n  away_teams = df$model_df$away_id,\n  home_goals = df$model_df$home_goals,\n  away_goals = df$model_df$away_goals,\n  only_prior = 1,\n  N_new = 1,\n  home_new = 10,\n  away_new = 11\n)\n\nmodel &lt;- cmdstan_model(here(\"posts\", \"nhl_goal_modelling\", \"model.stan\"))\nmodel_fit_prior &lt;- model$sample(\n  data = data_list,\n  parallel_chains = 4,\n  refresh = 0\n)\n\n\nRunning MCMC with 4 parallel chains...\n\n\nChain 2 finished in 0.9 seconds.\nChain 3 finished in 1.0 seconds.\nChain 4 finished in 1.2 seconds.\nChain 1 finished in 1.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 1.1 seconds.\nTotal execution time: 1.5 seconds.\n\n\nCode\nmodel_fit_prior$draws(c(\"fit_home_goals\")) |&gt;\n  as_draws_df() |&gt;\n  select(sample(5:1315, 10)) |&gt;\n  pivot_longer(cols = everything()) |&gt;\n  ggplot(aes(x = value)) +\n  geom_histogram() +\n  facet_wrap(~name) +\n  xlim(0, 20)\n\n\n\n\n\nCode\nmodel_fit_prior$draws(c(\"fit_away_goals\")) |&gt;\n  as_draws_df() |&gt;\n  select(sample(5:1315, 10)) |&gt;\n  pivot_longer(cols = everything()) |&gt;\n  ggplot(aes(x = value)) +\n  geom_histogram() +\n  facet_wrap(~name) +\n  xlim(0, 20)\n\n\n\n\n\nCode\ncat(\n  \"Pr(home goals &gt;= 10):\",\n  model_fit_prior$draws(c(\"fit_home_goals\")) |&gt;\n    as_draws_df() |&gt;\n    select(4:1315) |&gt;\n    (\\(x) {\n      round(100 * mean(x &gt;= 10), 2)\n    })(x = _),\n  \"%\\n\"\n)\n\n\nPr(home goals &gt;= 10): 13.94 %\n\n\nCode\ncat(\n  \"Pr(home goals &gt;= 20):\",\n  model_fit_prior$draws(c(\"fit_home_goals\")) |&gt;\n    as_draws_df() |&gt;\n    select(4:1315) |&gt;\n    (\\(x) {\n      round(100 * mean(x &gt;= 20), 2)\n    })(x = _),\n  \"%\\n\"\n)\n\n\nPr(home goals &gt;= 20): 7.69 %\n\n\nCode\ncat(\n  \"Pr(away goals &gt;= 10):\",\n  model_fit_prior$draws(c(\"fit_away_goals\")) |&gt;\n    as_draws_df() |&gt;\n    select(4:1315) |&gt;\n    (\\(x) {\n      round(100 * mean(x &gt;= 10), 2)\n    })(x = _),\n  \"%\\n\"\n)\n\n\nPr(away goals &gt;= 10): 10.52 %\n\n\nCode\ncat(\n  \"Pr(away goals &gt;= 20):\",\n  model_fit_prior$draws(c(\"fit_away_goals\")) |&gt;\n    as_draws_df() |&gt;\n    select(4:1315) |&gt;\n    (\\(x) {\n      round(100 * mean(x &gt;= 20), 2)\n    })(x = _),\n  \"%\\n\"\n)\n\n\nPr(away goals &gt;= 20): 5.38 %\n\n\nLooking at the prior predictive check (limiting the x-scale to make it easier to see the distribution), the distributions are a bit higher than we want, we could contstrain the priors a bit more, but most of the mass of the distribution is between 0-10 so I think that’s good enough. Now we can go onto fitting the model model and looking at the model diagnostics\n\n\nCode\ndata_list$only_prior &lt;- 0\nmodel_fit &lt;- model$sample(\n  data = data_list,\n  parallel_chains = 4,\n  refresh = 0\n)"
  },
  {
    "objectID": "posts/nhl_goal_modelling/index.html#model-diagnostics",
    "href": "posts/nhl_goal_modelling/index.html#model-diagnostics",
    "title": "Modelling NHL Goals using Hierarchical Poisson Model Using Stan",
    "section": "Model diagnostics",
    "text": "Model diagnostics\n\n\nCode\n# checking Rhats\nplot_grid(\n  model_fit$summary(c(\n    \"mu\",\n    \"is_home\",\n    \"att\",\n    \"def\",\n    \"att_sigma\",\n    \"def_sigma\"\n  )) |&gt;\n    select(variable, rhat) |&gt;\n    ggplot(aes(x = rhat)) +\n    geom_histogram() +\n    ggtitle(\"Histograms of Rhat\"),\n  model_fit$summary(c(\n    \"mu\",\n    \"is_home\",\n    \"att\",\n    \"def\",\n    \"att_sigma\",\n    \"def_sigma\"\n  )) |&gt;\n    select(variable, ess_bulk) |&gt;\n    ggplot(aes(x = ess_bulk)) +\n    geom_histogram() +\n    ggtitle(\"Histograms of ESS Bulk\"),\n  model_fit$summary(c(\n    \"mu\",\n    \"is_home\",\n    \"att\",\n    \"def\",\n    \"att_sigma\",\n    \"def_sigma\"\n  )) |&gt;\n    select(variable, ess_tail) |&gt;\n    ggplot(aes(x = ess_tail)) +\n    geom_histogram() +\n    ggtitle(\"Histograms of ESS Tail\")\n)\n\n\n\n\n\nAll the Rhats, and bulk and tail effective sample sizes look good and there were no problems during fitting. There are a few paramaters with ESS lower than the rest which may warrant a deeper look.\n\n\nCode\nloo_res &lt;- model_fit$loo()\nloo_res\nplot(loo_res)\n\n\nThe loo-cv results all look good."
  },
  {
    "objectID": "posts/nhl_goal_modelling/index.html#posterior-predictive-check",
    "href": "posts/nhl_goal_modelling/index.html#posterior-predictive-check",
    "title": "Modelling NHL Goals using Hierarchical Poisson Model Using Stan",
    "section": "Posterior Predictive Check",
    "text": "Posterior Predictive Check\n\n\nCode\nhome_ppc &lt;- ppc_bars(\n  yrep = (model_fit$draws(\"fit_home_goals\") |&gt; as_draws_matrix())[\n    sample(1:4000, 4000),\n  ],\n  y = data_list$home_goals\n)\n\n\naway_ppc &lt;- ppc_bars(\n  yrep = (model_fit$draws(\"fit_away_goals\") |&gt; as_draws_matrix())[\n    sample(1:4000, 4000),\n  ],\n  y = data_list$away_goals\n)\n\n\nplot_grid(\n  home_ppc,\n  away_ppc,\n  labels = c('Home', 'Away'),\n  label_size = 12,\n  ncol = 1\n)\n\n\n\n\n\nLooking at the posterior predictive distributions of the home and away goals, which is just comparing the distribution of goals as predicted by the model (labeled as y_rep) vs the distribution of goals seen in the data (the light blue bars). Overall it looks like the model predicts the number of goals well for the home games, but it seems to have some issues with the away goals."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This site contains some of my projects"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Modelling NHL Goals using Hierarchical Poisson Model Using Stan\n\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2024\n\n\nYatharth Khattar\n\n\n\n\n\n\nNo matching items"
  }
]